
1. Find the Unique Element - You have been given an integer array of size N. Where N is equal to 2M + 1. Now, in the given array/list, 'M' numbers are present twice and one number is present only once. You need to find and return that number which is unique in the array.

Answer: int findUnique(int *arr, int n){
		int XOR = 0;
		for(int i = 0; i < n; ++i){
			Xor ^= arr[i];	
		}
		return XOR;
	}




2. Duplicate in array - You have been given an integer array/list(ARR) of size N which contains numbers from 0 to (N - 2). Each number is present at least once. That is, if N = 5, the array/list constitutes values ranging from 0 to 3, and among these, there is a single integer value that is present twice. You need to find and return that duplicate number present in the array.

Answer: int findDuplicate(int *arr, int n){
		int sumOfNminusTwoNaturalNumbers = 0;
		for(int i = 0; i < n - 1; i++){
			sumOfNminusTwoNaturalNumbers += i;
		}
		int sumOfElements = 0;
		for(int i = 0; i < n; i++){
			sumOfElements += arr[i];
		}
		return (sumOfElements - sumOfNminusTwoNaturalNumbers);
	}




3. Array Intersection - You have been given two integer arrays of size N and M respectively. You need to print their intersection. An intersection for this problem can be defined when both the arrays contain a particular value or to put it in other words, when there is a common value that exists in both the arrays.

Answer: void intersection(int *arr1, int *arr2, int n, int m){
		sort(arr1, arr1 + n);
		sort(arr2, arr2 + m);
		
		int i = 0;
		int j = 0;

		while(i < n && j < m){
			if(arr1[i] == arr2[j]){
				cout << arr1[i] << " ";
				i++;
				j++;
			}
			else if(arr1[i] < arr2[j]){
				i++;
			}
			else{
				j++;
			}
		}
	}




4. Pair sum in array - You have been given an integer array and a number 'num'. Find and return the total number of pairs in the array which sum to 'num'.

Answer: int pairSum(int *arr, int n, int num){
		sort(arr, arr + n);

		int startIndex = 0;
		int endIndex = n - 1;
		
		int numPairs = 0;
		
		while(startIndex < endIndex){
			if(arr[startIndex] + arr[endIndex] > num){
				startIndex++;
			}
			else if(arr[startIndex] + arr[endIndex] > num){
				endIndex--;
			}
			else{
				int elementAtStart = arr[startIndex];
				int elementAtEnd = arr[endIndex];

				if(elementAtStart == elementAtEnd){
					int totalElementsFromStartToEnd = (endIndex - startIndex) + 1;
					numPairs += (totalElementsFromStartToEnd * (totalElementsFromStartToEnd - 1) / 2);
					return numPairs;
				}

				int tempStartIndex = startIndex + 1;
				int tempEndIndex = endIndex - 1;

				while(tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart){
					tempStartIndex += 1;
				}
				while(tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd){
					tempEndIndex -= 1;
				}
				
				int totalElementsFromStart = (tempStartIndex - startIndex);
				int totalElementsFromEnd = (endIndex - tempEndIndex);

				numPairs += (totalElementsFromStart * totalElementsFromEnd);

				startIndex = tempStartIndex;
				endIndex = tempEndIndex;
			}
		}
		return numPairs;
	}




5. Triplet sum - You have been given a random integer array and a number X. Find and return the triplet(s) in the array which sum to X.

Answer: int pairSum(int *arr, int startIndex, int endIndex, int num){
		int numPair = 0;
		while(startIndex < endIndex){
			if(arr[startIndex] + arr[endIndex] > num){
				startIndex++;
			}
			else if(arr[startIndex] + arr[endIndex] > num){
				endIndex--;
			}
			else{
				int elementAtStart = arr[startIndex];
				int elementAtEnd = arr[endIndex];

				if(elementAtStart == elementAtEnd){
					int totalElementsFromStartToEnd = (endIndex - startIndex) + 1;
					numPair += (totalElementsFromStartToEnd * (totalElementsFromStartToEnd - 1) / 2);
					return numPair;
				}

				int tempStartIndex = startIndex + 1;
				int tempEndIndex = endIndex - 1;

				while(tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart){
					tempStartIndex += 1;
				}
				while(tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd){
					tempEndIndex -= 1;
				}
				
				int totalElementsFromStart = (tempStartIndex - startIndex);
				int totalElementsFromEnd = (endIndex - tempEndIndex);

				numPair += (totalElementsFromStart * totalElementsFromEnd);

				startIndex = tempStartIndex;
				endIndex = tempEndIndex;
			}
		}
		return numPair;
	}
	int tripletSum(int *arr, int n, int num){
		sort(arr, arr + n);
		int numTriplets = 0;
		for(int i = 0; i < n; i++){
			int pairSumFor = num - arr[i];
			int numPairs = pairSum(arr, (i + 1), (n - 1), pairSumFor);
			numTriplets += numPairs;
		}
		return numTriplets;
	}




6. Rotate array - You have been given a random integer array of size N. Write a function that rotates the given array by D elements(towards the left).

Answer: void swapElements(int *input, int i, int j){
		int temp = input[i];
		input[i] = input[j];
		input[j] = temp;
	}
	void reverse(int *input, int start, int end){
		int i = start, j = end;
		while(i < j){
			swapElements(input, i, j);
			i++;
			j--;
		}
	}
	void rotate(int *input, int d, int n){
		if(d >= n && n != 0){
			d = d % n;
		}
		else if(n == 0){
			return;
		}
		reverse(input, 0, n - 1);
		reverse(input, 0, n - d - 1);
		reverse(input, n - d, n - 1);
	}




7. Check Array Rotation - You have been given an integer array of size N. It has been sorted(in increasing order) and then rotated by some number 'K' (K is greater than 0) in the right hand direction. Your task is to write a function that returns the value of 'K', that means, the index from which the array has been rotated.	

Answer: int arrayRotateCheck(int *input, int size){
		for(int i = 0; i < size - 1; ++i){
			if(input[i] > input[i + 1]){
				return i + 1;
			}
		}
		return 0;
	}
