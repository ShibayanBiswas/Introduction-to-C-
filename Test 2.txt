
1. Print 2D Array - Given a 2D integer array with n rows and m columns. Print the 0th row from input n times, 1st row n-1 timesâ€¦..(n-1)th row will be printed 1 time.

Input format : Line 1 : No of rows (n) and no of columns (m) (separated by single space)
               Line 2 : Row 1 elements (separated by space)
               Line 3 : Row 2 elements (separated by space)
               Line 4 : and so on

Answer: void print2DArray(int **input, int row, int col){
		int k = row;
		for(int i = 0; i < row; i++){
			for(int l = k - 1; l >= 0; l--){
				for(int j = 0; j < col; j++){
					cout << input[i][j] << " ";
				}
				cout << "\n";
			}
			k--;
		}
	}




2. Minimum Length Word - Given a string S (that can contain multiple words), you need to find the word which has minimum length.

Answer: void minLengthWord(char input[], char output[]){
		int minStart = -1;
		int minLength = INT_MAX;
		int currentStart = 0;
		int i = 0;
		int len = strlen(input);
		for(; i < len; i++){
			if(input[i] == ' '){
				int currentLength = i - currentStart;
				if(currentLength < minLength){
					minStart = currentStart;
					minLength = curentLength;
				}
				currentStart = i + 1;
			}
		}
		if(minStart == -1){
			for(i = 0; i <= len; i++){
				output[i] = input[i];
			}
		}
		else{
			currentLength = i - currentStart;
			if(currentLength < minLength){
				minStart = currentStart;
				minLength = curentLength;
			}
			int j = 0;
			for(i = 0; i < minStart + minLength; i++){
				output[j] = input[i];
				j++;
			}
			output[j] = '\0';
		}
	}




3. Leaders in array - Given an integer array A of size n. Find and print all the leaders present in the input array. An array element A[i] is called Leader, if all the elements following it (i.e. present at its right) are less than or equal to A[i]. Print all the leader elements separated by space and in the same order they are present in the input array.	

Answer: void Leaders(int *arr, int len){
		int j = 0;
		int *save = new int[len];
		int largest = INT_MIN;     //largest contains the maximum value of leading array
		for(int i = len - 1; i >= 0; i--){
			if(arr[i] >= largest){    // if element at current index is greater than largest then put it in array and make ot largest
				save[j] = arr[i];
				j++;
				largest = arr[i];
			}
		}
		for(int i = j - 1; i >= 0; i--){
			// Print the array in reverse order 
                  cout<<save[i] << " "; 
    		}
	}

				