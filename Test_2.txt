
(a) Print 2D Array- Given a 2D integer array with n rows and m columns. Print the 0th row from input n times, 1st row n-1 timesâ€¦..(n-1)th row will be printed 1 time.

void print2DArray(int **input, int row, int col) { 
	int k = row; 
	for(int i = 0; i < row; i++) { 
		for(int l = k-1; l >= 0; l--) { 
			for(int j = 0; j < col; j++) { 
				cout << input[i][j] << " "; 
			} 
			cout << "\n"; 
		} 
		k--;
	}
}


(b) Minimum Length Word- Given a string S (that can contain multiple words), you need to find the word which has minimum length.
Note : If multiple words are of same length, then answer will be first minimum length word in the string.
Words are seperated by single space only.

#include <climits>
#include <cstring>
void minLengthWord(char input[], char output[]){ 
    int minStart = -1;
    int minLength = INT_MAX;
    int currentStart = 0;
    int i = 0;
    int len = strlen(input);
    for(; i < len; i++){ 
        if(input[i] == ' '){
            int currentWordLength = i - currentStart;
            if(currentWordLength < minLength){
                minStart = currentStart; 
                minLength = currentWordLength;
            }
            currentStart = i + 1;
        }
    }
    if(minStart == -1){
        for(int i = 0; i <= len; i++) { 
            output[i] = input[i];
        }
    }
    else{
        int currentWordLength = i - currentStart;
        if(currentWordLength < minLength){
            minStart = currentStart;
            minLength = currentWordLength;
        } 
        int j = 0;
        for(int i = minStart; i < minStart + minLength; i++) {
            output[j++] = input[i];
        }
        output[j] = '\0';
    }
}


(c) Leaders in array- Given an integer array A of size n. Find and print all the leaders present in the input array. An array element A[i] is called Leader, if all the elements following
it (i.e. present at its right) are less than or equal to A[i]. Print all the leader elements separated by space and in the same order they are present in the input array.

void Leaders(int* arr,int len) {
    int j=0;
    int *save = new int[len];
    int largest=INT_MIN;
    //largest contains the maximum value of leading array. 
    for(int i=len-1; i >= 0; i--) {
        if(arr[i] >= largest){
            // if element at current index is greater than largest then put it in array and make ot largest.
            save[j]=arr[i];
            j++;
            largest=arr[i];
        }
    }
    for(int i=j-1; i >= 0; i--) {
        // Print the array in reverse order. 
        cout << save[i] << " "; 
    }
}


(d) Beautiful String: A ninja has been given a string containing either '0' or '1'. A binary string is called beautiful if it contains alternating 0s and 1s. Your task is to determine the 
number of operations that the ninja has to perform to make the string beautiful.

int makeBeautiful(string str) {
    int n = str.length();
    // 't1' denotes the difference between values at indices in 'str' and the possible beautiful string starting with 0 
    // 't2' denotes the difference between values at indices in 'str' and the possible beautiful string starting with 1
    // 's1' and 's2' denote the expected value at index 'i' in both of the possible beautiful strings 
    int t1 = 0, t2 = 0;
    char s1 = '0', s2 = '1';
    // Iterate over the string
    for(int i = 0; i < n; i++){
        // If 'str[i]' == 1
        if(str[i] == '1'){
            if(s1 == '0'){
                t1 = t1 + 1;
            }
            else{
                t2 = t2 +1;
            }
        }
        // If 'str[i]' == 0
        else{
            if(s1 == '1'){
                t1 = t1 + 1;
            }
            else{
                t2 = t2 + 1;
            }
        }
        // If 's1' == '0' then make it 1 and vise versa do the same for 's2'
        if(s1 == '1'){
            s1 = '0';
            s2 = '1';
        }
        else{
            s1 = '1';
            s2 = '0';
        }
    }
    // Return the minimum of 't1' and 't2'
    return min(t1, t2);
}

