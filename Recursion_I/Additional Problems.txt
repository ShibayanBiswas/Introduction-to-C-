
(a) Replace pi (recursive)- Given a string, compute recursively a new string where all appearances of "pi" have been replaced by "3.14".
Answer: int length(char input[]){
		int len = 0;
		for(int i = 0; input[i] != '\0'; i++){
			len++;
		}
		return len;
	}
	void replacePi(char input[], int start){
		if(input[start] == '\0' || input[start + 1] == '\0'){
			return;
		}
		replacePi(input, start + 1);
		if(input[start] == 'p' && input[start + 1] == '\0'){
			int len = length(input);
			input[len + 2] = '\0';
			for(int i = len - 1; i > start + 2; i--){
				input[i + 2] = input[i];
			}
			input[start] = '3';
			input[start + 1] = '.';
			input[start + 2] = '1';
			input[start + 3] = '4';
		}
	}
	void replacePi(char input[]){
		replace(input, 0);
	}


(b) Remove X- Given a string, compute recursively a new string where all 'x' chars have been removed.
Amswer: int length(char input[]){
		int len = 0;
		for(int i = 0; input[i] != '\0'; i++){
			len++;
		}
		return len;
	}
	void removeX(char input[], int start){
		if(input[start] == \'0'){
			return;
		}
		removeX(input, start + 1);
		if(input[start] == 'x'){
			int len = length(input);
			int i;
			for(i = start + 1; i < len; i++){
				input[i - 1] = input[i];
			}
			input[i - 1] = '\0';
		}
	}
	void removeX(char input[]){
		removeX(input, 0);
	}


(c) String to Integer- Write a recursive function to convert a given string into the number it represents. That is input will be a numeric string that contains only numbers, you need to 
convert the string into corresponding integer and return the answer.
Answer: int length(char input[]){
		int len = 0;
		for(int i = 0; input[i] != '\0'; i++){
			len++;
		}
		returnn len;
	}
	int stringToNumber(char input[], int last){
		if(last == 0){
			return input[last] - '0';
		}
		int ans = stringToNumber(input, last - 1);
		int a = input[last] - '0';
		return ans * 10 + a;
	}
	int stringToNumber(char input[]){
		int len = length(input);
		reurn stringToNumber(input, len - 1);


(d) Pair Star- Given a string S, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".	
Answer: int length(char input[]){
		int len = 0;
		for(int i = 0; input[i] != '\0'; i++){
			len++;
		}
		returnn len;
	}
	void pairStar(char input[], int start){
		if(input[start] == '\0'){
			return;
		}
		pairStar(input, start + 1);
		if(input[start] == input[start + 1]){
			int l = length(input);
			input[l + 1] = '\0';
			for(int i = l - 1; i >= start + 1; i--){
				input[i + 1] = input[i];
			}
			input[i + 1] = '*';
		}
	}


(e) Tower of Hanoi- Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using 
third rod (say auxiliary). The rules are :
1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.	
Answer: void towerOfHanoi(int n, char source, char auxiliary, char destination) {
    		if(n == 0) {
        		return;
    		}
    		towerOfHanoi(n - 1, source, destination, auxiliary);
    		cout << source << " " << destination << endl;
    		towerOfHanoi(n - 1, auxiliary, source, destination);
	}

The idea is to use the helper node to reach the destination using recursion. Below is the pattern for this problem:

1) Shift 'N-1' disks from 'A' to 'B', using C
2) Shift last disk from 'A' to 'C'
3) Shift ‘N-1’ disks from 'B' to 'C', using A		